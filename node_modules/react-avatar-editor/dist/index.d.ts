import * as React from "react";
declare type BorderType = [number, number] | number;
interface IAvatarEditorProps {
    style?: any;
    image?: string | File;
    width: number;
    border?: BorderType;
    height: number;
    position?: IPosition;
    crossOrigin?: '' | 'anonymous' | 'use-credentials';
    onLoadFailure?: () => void;
    onLoadSuccess?: (image: IImageState) => void;
    onImageReady?: () => void;
    onImageChange?: () => void;
    onMouseUp?: () => void;
    onMouseMove?: (e: React.TouchEvent | React.MouseEvent) => void;
    onPositionChange?: (position: IPosition) => void;
}
interface IPosition {
    x: number;
    y: number;
}
interface IImageState {
    x: number;
    y: number;
    width: number;
    height: number;
    resource?: HTMLImageElement;
}
interface IAvatarEditorState {
    dragging: boolean;
    image: IImageState;
}
declare const defaultProps: {
    scale: number;
    rotate: number;
    border: number;
    borderRadius: number;
    width: number;
    height: number;
    color: number[];
    disableBoundaryChecks: boolean;
    disableHiDPIScaling: boolean;
};
declare type DefaultProps = Readonly<typeof defaultProps>;
declare type IAllAvatarEditorProps = IAvatarEditorProps & DefaultProps;
declare class AvatarEditor extends React.Component<IAllAvatarEditorProps, IAvatarEditorState> {
    static defaultProps: {
        scale: number;
        rotate: number;
        border: number;
        borderRadius: number;
        width: number;
        height: number;
        color: number[];
        disableBoundaryChecks: boolean;
        disableHiDPIScaling: boolean;
    };
    private canvas;
    private pixelRatio;
    constructor(props: IAllAvatarEditorProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: IAllAvatarEditorProps, prevState: IAvatarEditorState): void;
    private getCanvas;
    private getContext;
    private isVertical;
    private getBorders;
    private getDimensions;
    getImage(): HTMLCanvasElement;
    /**
     * Get the image scaled to original canvas size.
     * This was default in 4.x and is now kept as a legacy method.
     */
    getImageScaledToCanvas(): HTMLCanvasElement;
    private getXScale;
    private getYScale;
    getCroppingRect(): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    private loadImage;
    private getInitialSize;
    private clearImage;
    private paintImage;
    private calculatePosition;
    private paint;
    private handleDrag;
    private handleStartDrag;
    private handleStopDrag;
    render(): JSX.Element;
}
export default AvatarEditor;
