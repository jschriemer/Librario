'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GROUP, _PropTypes$shape;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// In firefox, setTimeout with duration 0 too short for browser notice the changes in dom
var initialTransitDuration = 20;

var PHASE = {
  CLOSE: 'close',
  CLOSING: 'closing',
  CLOSED: 'closed',
  OPEN: 'open',
  OPENING: 'opening',
  OPENED: 'opened'
};

var GROUP = (_GROUP = {}, _defineProperty(_GROUP, PHASE.CLOSE, PHASE.CLOSE), _defineProperty(_GROUP, PHASE.CLOSED, PHASE.CLOSE), _defineProperty(_GROUP, PHASE.OPENING, PHASE.CLOSE), _defineProperty(_GROUP, PHASE.CLOSING, PHASE.OPEN), _defineProperty(_GROUP, PHASE.OPEN, PHASE.OPEN), _defineProperty(_GROUP, PHASE.OPENED, PHASE.OPEN), _GROUP);

var Expand = function (_Component) {
  _inherits(Expand, _Component);

  function Expand() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Expand);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Expand.__proto__ || Object.getPrototypeOf(Expand)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      status: _this.props.open ? PHASE.OPEN : PHASE.CLOSE
    }, _this.getClientHeight = function () {
      return _this.refWrapper.scrollHeight;
    }, _this.getDefaultExpandStyle = function () {
      var status = _this.state.status;


      switch (status) {
        case PHASE.OPENING:
        case PHASE.CLOSE:
        case PHASE.CLOSED:
          return { height: 0, opacity: 0, overflow: 'hidden' };
        case PHASE.OPENED:
        case PHASE.CLOSING:
          return { height: _this.getClientHeight(), opacity: 1, overflow: 'hidden' };
        default:
          return { height: 'auto', opacity: 1, overflow: 'unset' };
      }
    }, _this.getExpandStyle = function () {
      return _extends({}, _this.getDefaultExpandStyle(), _this.props.styles[GROUP[_this.state.status]]);
    }, _this.getTransition = function (attribute) {
      return attribute + ' ' + _this.props.duration + 'ms ' + _this.props.easing;
    }, _this.updateStatus = function (status) {
      return _this.setState({ status: status });
    }, _this.delay = function (fn, time) {
      _this.timeout = setTimeout(fn, time);
    }, _this.clearDelay = function () {
      if (_this.timeout) {
        clearTimeout(_this.timeout);
      }
    }, _this.transit = function (entering, entered, enter) {
      var duration = _this.props.duration;


      _this.updateStatus(entering);

      _this.delay(function () {
        _this.updateStatus(entered);

        _this.delay(function () {
          _this.updateStatus(enter);
        }, duration);
      }, initialTransitDuration);
    }, _this.toggle = function (open) {
      _this.clearDelay();

      if (open) {
        _this.transit(PHASE.OPENING, PHASE.OPENED, PHASE.OPEN);
      } else {
        _this.transit(PHASE.CLOSING, PHASE.CLOSED, PHASE.CLOSE);
      }
    }, _this.setRef = function (ref) {
      _this.refWrapper = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Expand, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref2) {
      var open = _ref2.open;

      if (open !== this.props.open) {
        this.toggle(open);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.clearDelay();
    }
  }, {
    key: 'getStyle',
    value: function getStyle() {
      var transition = this.props.transitions.map(this.getTransition).join(',');

      return _extends({}, this.getExpandStyle(), {
        transition: transition
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          children = _props.children,
          Tag = _props.tag;


      var childProps = {
        className: className,
        style: this.getStyle(),
        ref: this.setRef
      };

      return _react2.default.createElement(
        Tag,
        childProps,
        children
      );
    }
  }]);

  return Expand;
}(_react.Component);

Expand.propTypes = {
  children: _propTypes2.default.node.isRequired,
  open: _propTypes2.default.bool,
  duration: _propTypes2.default.number,
  easing: _propTypes2.default.string,
  className: _propTypes2.default.string,
  tag: _propTypes2.default.string,
  transitions: _propTypes2.default.arrayOf(_propTypes2.default.string),
  styles: _propTypes2.default.shape((_PropTypes$shape = {}, _defineProperty(_PropTypes$shape, PHASE.OPEN, _propTypes2.default.object), _defineProperty(_PropTypes$shape, PHASE.CLOSE, _propTypes2.default.object), _PropTypes$shape))
};

Expand.defaultProps = {
  open: false,
  duration: 400,
  easing: 'ease-in-out',
  className: '',
  tag: 'div',
  transitions: ['height', 'opacity'],
  styles: {}
};

exports.default = Expand;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,